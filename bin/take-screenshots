#!/usr/bin/env perl
use strict;
use warnings;

use List::Util qw(first);
use Path::Class qw(file);
use WWW::Selenium;
use WWW::Selenium::Util qw/server_is_running/;

use Getopt::Long;
my $RT      = 'http://localhost:8008';
my $output  = $ENV{PWD};
my $verbose = 0;
GetOptions(
    'url=s'     => \$RT,
    'output=s'  => \$output,
    'verbose'   => \$verbose,
);

unless ($RT) {
    die "Usage: $0 --url http://localhost:8008 --output .\n";
}

my $PID;
unless (server_is_running) {
    eval { require Alien::SeleniumRC; 1; }
        or die "Please start a Selenium server first, or install Alien::SeleniumRC so I can do it for you.\n";

    $PID = fork();
    die if $PID == -1;
    if ($PID) {
        # parent
        sleep 5; # time for java to find it's pants
    } else {
        # child
        unless ($verbose) {
            close *STDERR;
            close *STDOUT;
        }
        $ENV{PATH} = "$ENV{PATH}:/usr/lib/firefox:/usr/lib/mozilla-firefox";
        print STDERR "started selenium server [$$]\n" if $verbose;
        local $SIG{TERM} = sub { exit 0 };
        my $jarfile = Alien::SeleniumRC::find_jar_location();
        exec "java -jar $jarfile" or die "couldn't exec! $!\n";
    }
}

END {
    if ($PID) {
        print STDERR "killing $PID\n" if $verbose;
        kill(15, $PID);
    }
}

# Convert output to absolute path for selenium
$output = file($output)->absolute;

# title|path -> [title, path]
my @pages = map  { [ split /\|/, $_, 2 ] }
            grep { not /^#/ and /\S/ }
            map  { chomp; $_ }
                 <DATA>;

my $firefox = WWW::Selenium->new( browser_url => $RT );
$firefox->start;
$firefox->open($RT);

# Login
print "Logging in\n";
$firefox->type('name=user', 'jesse');
$firefox->type('name=pass', 'password');
$firefox->submit('id=login');

# Resize to something reasonable
resize_window($firefox, 975, 400);

# Save the subscription so we see it on the homepage
for my $subscribe (grep { $_->[1] =~ /Dashboards\/Subscription/ } @pages) {
    print "Saving Dashboard subscription\n";
    $firefox->open($RT . $subscribe->[1]);
    $firefox->click('Save');
}

# Mock up the create ticket page
{
    $firefox->open("$RT/Ticket/Create.html?Queue=Office");
    $firefox->select('Object-RT::Ticket--CustomField-1-Values', 'Filterfresh');
    $firefox->type('Subject', 'Office has run out of coffee!');
    $firefox->wait_for_element_present('id=cke_Content', 10000);
    $firefox->run_script(<<"    .");
        CKEDITOR.instances.Content.setData(
            "<p><b>The worst has happened.</b></p>"
          + "<p style='color: red; font-size: xx-large;'>There is no coffee to be found anywhere in the office.</p>"
          + "<p>Productivity is at an <u>all-time low</u>!</p>"
        );
    .
    $firefox->pause(1000);

    print "Screenshotting ticket_create\n";
    $firefox->capture_entire_page_screenshot("$output/ticket_create.png");
}

# Set up an example Hiveminder branding :)
{
    $firefox->open("$RT/Admin/Tools/Theme.html");
    $firefox->attach_file('logo-upload', 'file://' . etc('example-logo.png'));
    # the Upload button doesn't have a name or ID
    $firefox->click('css=input[value="Upload"]');
    $firefox->wait_for_page_to_load(1000);

    $firefox->select('section', 'Page');
    $firefox->click('css=.primary-colors button:nth-of-type(2)');

    $firefox->select('section', 'Title bar');
    $firefox->click('css=.primary-colors button:nth-of-type(1)');

    $firefox->select('section', 'Page title');
    $firefox->run_script('jQuery.farbtastic("#color-picker").setColor("#000000");');

    print "Screenshotting theme/brand editor\n";
    $firefox->capture_entire_page_screenshot("$output/theme_editor.png");

    $firefox->type('user_css', advanced_css());
    $firefox->click('try');
    $firefox->pause(1000);

    print "Screenshotting theme/brand editor, advanced\n";
    $firefox->capture_entire_page_screenshot("$output/theme_editor_advanced.png");

    # reset it all
    for my $button (qw(reset_css reset_logo)) {
        $firefox->click($button);
        $firefox->wait_for_page_to_load(1000);
    }
}

# Nab the menus in action
{
    $firefox->open($RT);
    $firefox->run_script('jQuery("#tools-config-queues-select").focus();');
    $firefox->pause(1000);
    print "Screenshotting aileron_menus\n";
    $firefox->capture_entire_page_screenshot("$output/aileron_menus.png");
    $firefox->open($RT);
}

# Show some tweakable prefs
{
    shoot_pref(
        pref => 'SimplifiedRecipients',
        page => 'ticket_update',
    );
}

my $resized = 0;

# Capture the pages we want
for my $page (@pages) {
    my ($title, $url) = @$page;

    print "Screenshotting $title\n";
    $firefox->open("$RT$url");
    if ($url =~ m{Ticket/Display}) {
        $firefox->pause(3000);
    } else {
        $firefox->wait_for_page_to_load(5000);
    }

    if ($url =~ m{^/m/} and not $resized) {
        resize_window($firefox, 416, 400);
        $resized = 1;
    }

    $firefox->capture_entire_page_screenshot("$output/$title.png");
}

$firefox->stop;


sub shoot_pref {
    my %args = ( vals => [1,0], @_ );
    my $pref = $args{'pref'};
    my $shot = $args{'page'};
    my ($on, $off) = @{$args{'vals'}};

    my $name = "pref$pref";
       $name =~ s/([a-z])([A-Z])/$1_\L$2\E/g;

    $firefox->open("$RT/Prefs/Other.html?Update=1;$pref=$on");
    $firefox->open(map { $RT . $_->[1] } first { $_->[0] eq $shot } @pages);
    $firefox->wait_for_page_to_load(5000);
    print "Screenshotting $name\n";
    $firefox->capture_entire_page_screenshot("$output/$name.png");
    $firefox->open("$RT/Prefs/Other.html?Update=1;$pref=$off");

    $firefox->open($RT);
}

sub resize_window {
    my ($window, $w, $h) = @_;
    $window->run_script("window.moveTo(0,0); window.resizeTo($w, $h);");
    $window->pause(1000);
}

sub etc {
    file($0)->dir->parent->subdir('etc')->file(shift)->absolute;
}

sub advanced_css {
    local $/;
    open my $fh, '<', etc('example.css') or return;
    my $css = <$fh>;
    close $fh;
    return $css;
}

__DATA__
homepage|/index.html
ticket_basics|/Ticket/Display.html?id=1
ticket_history|/Ticket/History.html?id=1
ticket_update|/Ticket/Update.html?id=1
# Ticket create is special-cased above
search_results|/Search/Results.html?Query=id+<+4;Order=DESC
search_bulk_update|/Search/Bulk.html?Query=id+<+4;Order=DESC
ticket_relationships|/Ticket/Graphs/index.html?id=1&Direction=LR&LeadingLink=DependsOn&MaxDepth=0&ShowLinks=MemberOf&ShowLinks=RefersTo&FillUsing=&Level-1-Properties=Subject&Level-1-Properties=Status&Level-2-Properties=Subject&Level-2-Properties=Status&Level-3-Properties=Subject&Level-3-Properties=Status&Update=Update+Graph&SavedSearchId=new&SavedSearchOwner=RT::User-12&SavedSearchDescription=&SavedSearchLoad=
ticket_charts|/Search/Chart.html?Query=Created+%3C+%27tomorrow%27&SavedChartSearchId=new&ChartStyle=bar&PrimaryGroupBy=Owner.Name
dashboard|/Dashboards/11/SLA+Performance
dashboard_subscription|/Dashboards/Subscription.html?id=11
# The theme editor is also special-cased above for more interesting screenshots
theme_editor_defaults|/Admin/Tools/Theme.html
# acl-User_Defined-22 is the Best Practical staff group
admin_rights_editor|/Admin/Global/GroupRights.html#acl-User_Groups-22
# Once we hit a mobile page, we resize to a smaller window.  Only mobile pages
# should be below this line.
mobile|/m/
mobile_ticket_basics|/m/ticket/show?id=1
